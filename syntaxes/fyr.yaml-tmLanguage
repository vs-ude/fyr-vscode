scopeName: source.fyr
name: Fyr
comment: 'Fyr language'
fileTypes:
    - fyr
foldingStartMarker: '({|\()\s*$'
foldingStopMarker: '(}|\))\s*$'
patterns:
    -
        comment: 'Block comments'
        begin: '/\*'
        end: '\*/'
        captures:
            '0':
                name: punctuation.definition.comment.fyr
        name: comment.block.fyr
    -
        comment: 'Line comments'
        begin: //
        beginCaptures:
            '0':
                name: punctuation.definition.comment.fyr
        end: $
        name: comment.line.double-slash.fyr
    -
        comment: 'Interpreted string literals'
        begin: '("""|")'
        beginCaptures:
            '0':
                name: punctuation.definition.string.begin.fyr
        end: '\1'
        endCaptures:
            '0':
                name: punctuation.definition.string.end.fyr
        name: string.quoted.double.fyr
        patterns:
            - include: '#string_escaped_char'
            - include: '#string_placeholder'
    -
        comment: 'Syntax error using slices'
        match: '\[\](\s+)'
        captures:
            '1':
                name: invalid.illegal.slice.fyr
    -
        comment: 'Syntax error numeric literals'
        match: '\b0[0-7]*[89]\d*\b'
        name: invalid.illegal.numeric.fyr
    -
        comment: Loops
        match: '(for)\s*\((([^\)]+|\([^\)]*\))*)\)'
        captures:
            '1':
                name: keyword.control.fyr
            '2':
                patterns:
                    -
                        comment: for (let|var..in..)
                        match: '(let|var) ([\w\s,]+) (in) (.*)'
                        captures:
                            '1':
                                name: keyword.data.fyr
                            '2':
                                patterns:
                                    -
                                        include: '#variables'
                            '3':
                                name: keyword.control.fyr
                            '4':
                                patterns:
                                    -
                                        include: $self
                    -
                        comment: others
                        include: $self
    -
        comment: 'Function declarations'
        match: '^([a-z\s]+)?\s*(\bfunc\b)(?:\s*(const\s?)?(?:(\w+)\.)?([a-zA-Z_]\w*)(?:<(\w+)\s+(is)\s+([\w\s\|]+)>)?(?=\())?'
        captures:
            '1':
                patterns:
                    - {match: '(export|\s)*', name: keyword.meta.fyr}
            '2':
                name: keyword.meta.function.fyr
            '3':
                name: keyword.data.fyr
            '4':
                name: entity.name.type.fyr
            '5':
                name: entity.name.function.fyr
            '6':
                name: entity.name.type.fyr
            '7':
                name: keyword.meta.fyr
            '8':
                patterns:
                    - {include: '#storage_types'}
                    - {include: '#custom_type'}
    -
        include: '#keywords'
    -
        comment: min/max/sizeof
        match: '(min|max|sizeof|alignedSizeof)<([a-zA-Z_]\w*)>[^\(]'
        captures:
            '1':
                name: support.function.builtin.fyr
            '2':
                patterns:
                    - {include: '#storage_types'}
                    - {include: '#custom_type'}
    -
        comment: Functions
        match: '([a-zA-Z_]\w*)(<[a-zA-Z_]\w*>)?(?=\()'
        captures:
            '1':
                patterns:
                    - {include: '#builtin'}
                    - {match: '\w*', name: entity.name.function}
            '2':
                patterns:
                    - {include: '#storage_types'}
                    - {include: '#custom_type'}
    -
        comment: 'Floating-point literals'
        match: '(\.\d+([Ee][-+]\d+)?i?)\b|\b\d+\.\d*(([Ee][-+]\d+)?i?\b)?'
        name: constant.numeric.floating-point.fyr
    -
        comment: Integers
        match: '\b((0x[0-9a-fA-F]+)|(0[0-7]+i?)|(\d+([Ee]\d+)?i?)|(\d+[Ee][-+]\d+i?))\b'
        name: constant.numeric.integer.fyr
    -
        comment: 'Language constants'
        match: \b(true|false|nil|iota)\b
        name: constant.language.fyr
    -
        comment: 'Package declarations'
        match: '(?<=package)\s+([a-zA-Z_]\w*)'
        captures:
            '1':
                name: entity.name.package.fyr
    -
        comment: 'Single line import declarations'
        match: '(?<=import)(\s+((?!\s+")[^\s]*)?\s*)((")([^"]*)("))'
        captures:
            '2':
                name: entity.alias.import.fyr
            '3':
                name: string.quoted.double.fyr
            '4':
                name: punctuation.definition.string.begin.fyr
            '5':
                name: entity.name.import.fyr
            '6':
                name: punctuation.definition.string.end.fyr
    -
        comment: 'Multiline import declarations'
        begin: '(?<=import)\s+(\()'
        beginCaptures:
            '1':
                name: punctuation.other.bracket.round.fyr
        patterns:
            -
                match: '((?!\s+")[^\s]*)?\s+((")([^"]*)("))'
                captures:
                    '1': {name: entity.alias.import.fyr}
                    '2': {name: string.quoted.double.fyr}
                    '3': {name: punctuation.definition.string.begin.fyr}
                    '4': {name: entity.name.import.fyr}
                    '5': {name: punctuation.definition.string.end.fyr}
        end: \)
        endCaptures:
            '0':
                name: punctuation.other.bracket.round.fyr
    -
        comment: 'Type declarations'
        match: '(?<=type)\s+([a-zA-Z_]\w*)(<[a-zA-Z_]\w*>)?'
        captures:
            '1':
                name: entity.name.type.fyr
            '2':
                patterns:
                    - {include: '#storage_types'}
                    - {include: '#custom_type'}
    -
        comment: 'Shorthand variable declaration and assignments'
        match: '[a-zA-Z_]\w*(?:,\s*[a-zA-Z_]\w*)*(?=\s*:=)'
        captures:
            '0':
                patterns:
                    - {match: '[a-zA-Z_]\w*', name: variable.other.assignment.fyr}
                    - {include: '#delimiters'}
    -
        comment: 'Assignments to existing variables'
        match: '(?<!var|let)\s*([a-zA-Z_]\w*(?:,\s*[a-zA-Z_]\w*)*)(?=\s*=[^=])'
        captures:
            '1':
                patterns:
                    - {match: '[a-zA-Z_]\w*', name: variable.other.assignment.fyr}
                    - {include: '#delimiters'}
    -
        comment: 'Single line variable declarations/assignments'
        match: '(?<=var|let)\s+([^"]*|"[^"]+)$'
        captures:
            '1':
                patterns:
                    - {include: '#variables'}
    -
        comment: 'Multiline variable declarations/assignments'
        begin: (\b(var|let)\b)\s+(\()
        beginCaptures:
            '1':
                name: keyword.var.fyr
            '2':
                name: punctuation.other.bracket.round.fyr
        end: \)
        endCaptures:
            '0':
                name: punctuation.other.bracket.round.fyr
        patterns:
            -
                include: '#variables'
            -
                include: $self
    -
        comment: 'Type casting'
        match: '<(#[a-z]*\s)?([a-z0-9]*)>'
        captures:
            '1':
                patterns:
                    - {include: '#keywords'}
            '2':
                patterns:
                    - {include: '#storage_types'}
    -
        comment: Terminators
        match: ;
        name: punctuation.terminator.fyr
    -
        include: '#brackets'
    -
        include: '#delimiters'
    -
        include: '#operators'
    -
        include: '#runes'
    -
        include: '#storage_types'
    -
        comment: 'Variable usages'
        match: '\b([a-zA-Z_]\w*)\b'
        name: variable.other.fyr
repository:
    brackets:
        patterns:
            -
                match: '\{|\}'
                name: punctuation.other.bracket.curly.fyr
            -
                match: \(|\)
                name: punctuation.other.bracket.round.fyr
            -
                match: '\[|\]'
                name: punctuation.other.bracket.square.fyr
    delimiters:
        patterns:
            -
                match: ','
                name: punctuation.other.comma.fyr
            -
                match: '\.(?!\.\.)'
                name: punctuation.other.period.fyr
            -
                match: ':(?!=)'
                name: punctuation.other.colon.fyr
    keywords:
        patterns:
            -
                comment: 'Flow control keywords'
                match: \b(break|continue|else|for|if|in|return)\b
                name: keyword.control.fyr
            -
                match: \b(spawn|yield|component)\b
                name: keyword.execution.fyr
            -
                match: \b(export|extends|func|import|is|package)\b
                name: keyword.meta.fyr
            -
                match: \b(const|map|struct|this|type|var|let)\b
                name: keyword.data.fyr
    builtin:
        patterns:
            -
                match: '\b(append|cap|clone|copy|len|make|move|new|panic|push|println|print|real|recover|slice|take|tryPush)\b'
                name: support.function.builtin.fyr
    operators:
        comment: 'Note that the order here is very important!'
        patterns:
            -
                match: '(\*|&)(?=\w)'
                name: keyword.operator.address.fyr
            -
                match: \-\-
                name: keyword.operator.decrement.fyr
            -
                match: \+\+
                name: keyword.operator.increment.fyr
            -
                match: '(<<|>>)'
                name: keyword.operator.arithmetic.bitwise.fyr
            -
                match: '(==|!=|<=|>=|<|>)'
                name: keyword.operator.comparison.fyr
            -
                match: '(&&|\|\||!)'
                name: keyword.operator.logical.fyr
            -
                match: '(=|\+=|\-=|\|=|\^=|\*=|/=|:=|%=|<<=|>>=|&\^=|&=)'
                name: keyword.operator.assignment.fyr
            -
                match: '(\+|\-|\*|/|%)'
                name: keyword.operator.arithmetic.fyr
            -
                match: '(&(?!\^)|\||\^|&\^)'
                name: keyword.operator.arithmetic.bitwise.fyr
            -
                match: \.\.\.
                name: keyword.operator.ellipsis.fyr
    runes:
        patterns:
            -
                match: '\''(\\([0-7]{3}|[abfnrtv\\''"]|x[0-9a-fA-F]{2}|u[0-9a-fA-F]{4}|U[0-9a-fA-F]{8})|\p{Any})\'''
                name: constant.other.rune.fyr
            -
                match: '\''.*\'''
                name: invalid.illegal.unknown-rune.fyr
    storage_types:
        patterns:
            -
                match: \bbool\b
                name: storage.type.boolean.fyr
            -
                match: \bbyte\b
                name: storage.type.byte.fyr
            -
                match: \berror\b
                name: storage.type.error.fyr
            -
                match: '\b(double|float|u?int(8|16|32|64)?)\b'
                name: storage.type.numeric.fyr
            -
                match: \brune\b
                name: storage.type.rune.fyr
            -
                match: \bchar\b
                name: storage.type.char.fyr
            -
                match: \bstring\b
                name: storage.type.string.fyr
            -
                match: \bcoroutine\b
                name: storage.type.coroutine.fyr
    custom_type:
        patterns:
            -
                match: \b[A-Z]\w*\b
                name: entity.name.type.fyr
    string_escaped_char:
        patterns:
            -
                match: '\\([0-7]{3}|[abfnrtv\\''"]|x[0-9a-fA-F]{2}|u[0-9a-fA-F]{4}|U[0-9a-fA-F]{8})'
                name: constant.character.escape.fyr
            -
                match: '\\[^0-7xuUabfnrtv\''"]'
                name: invalid.illegal.unknown-escape.fyr
    string_placeholder:
        patterns:
            -
                match: '%(\[\d+\])?([\+#\-0\x20]{,2}((\d+|\*)?(\.?(\d+|\*|(\[\d+\])\*?)?(\[\d+\])?)?))?[vT%tbcdoqxXUbeEfFgGsp]'
                name: constant.other.placeholder.fyr
    variables:
        comment: 'First add tests and make sure existing tests still pass when changing anything here!'
        patterns:
            -
                comment: 'variable assignments without type'
                match: '([a-zA-Z_]\w*(?:,\s*[a-zA-Z_]\w*)*)\s*=(.*)'
                captures:
                    '1': {patterns: [{match: '[a-zA-Z_]\w*', name: variable.other.assignment.fyr}, {include: '#delimiters'}]}
                    '2': {patterns: [{include: $self}]}
            -
                comment: 'variable assignments with type declaration'
                match: '([a-zA-Z_]\w*(?:,\s*[a-zA-Z_]\w*)*)(\s+[^=,]*\s*)?=(.*)'
                captures:
                    '1': {patterns: [{match: '[a-zA-Z_]\w*', name: variable.other.assignment.fyr}, {include: '#delimiters'}]}
                    '2': {patterns: [{include: '#type_declaration'}]}
                    '3': {patterns: [{include: $self}]}
            -
                match: '([a-zA-Z_]\w*(?:,\s*[a-zA-Z_]\w*)*)(\s+[^=,]*\s*)?([^=].*)'
                captures:
                    '1': {patterns: [{match: '[a-zA-Z_]\w*', name: variable.other.declaration.fyr}, {include: '#delimiters'}]}
                    '2': {patterns: [{include: '#type_declaration'}]}
                    '3': {patterns: [{include: $self}]}
    type_declaration:
        patterns:
            -
                match: '[\*~\^]?(\[.*\])?(\w+)'
                captures:
                    '1': {patterns: [{include: $self}]}
                    '2': {patterns: [{include: '#storage_types'}, {include: '#custom_type'}]}

version: 0.1.0
